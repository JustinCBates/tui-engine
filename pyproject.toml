[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "tui-engine"
version = "0.1.0"
description = "Advanced extensions for the questionary CLI prompt library"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"},
]
keywords = ["cli", "prompt", "terminal", "questionary", "interactive", "tui"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: System :: Shells",
    "Topic :: Terminals",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    # keep questionary as a runtime dependency if consumers use it directly
    "questionary>=2.0.1",
    "prompt-toolkit>=3.0.43",
    "rich>=13.7.0",
    "click>=8.1.7",
    "pydantic>=2.5.0",
    "python-dateutil>=2.8.2",
    "colorama>=0.4.6",
    "typing-extensions>=4.8.0; python_version<'3.10'",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.4.0",
    "pytest-benchmark>=4.0.0",
    "coverage>=7.3.2",
    "pre-commit>=3.5.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "mypy>=1.7.1",
    "ruff>=0.1.6",
    "bandit>=1.7.5",
    "safety>=3.0.0",
    "pip-audit>=2.6.0",
    "memory-profiler>=0.61.0",
]
test = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.1",
    "pytest-mock>=3.12.0",
    "pytest-xdist>=3.4.0",
    "pytest-benchmark>=4.0.0",
    "coverage>=7.3.2",
]
docs = [
    "sphinx>=7.2.6",
    "sphinx-rtd-theme>=1.3.0",
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
]
quality = [
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "ruff>=0.1.6",
]
security = [
    "bandit>=1.7.5",
    "safety>=3.0.0",
    "pip-audit>=2.6.0",
]

[project.urls]
Homepage = "https://github.com/JustinCBates/tui-engine"
Repository = "https://github.com/JustinCBates/tui-engine"
Documentation = "https://justincbates.github.io/tui-engine"
"Bug Tracker" = "https://github.com/JustinCBates/tui-engine/issues"
Changelog = "https://github.com/JustinCBates/tui-engine/blob/main/CHANGELOG.md"

[project.scripts]
qext = "tui_engine.cli:main"

# Tool configurations

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "UP", "B", "C4"]
ignore = [
    "E203", "E501",  # Original ignores
    "N806",          # Variable name should be lowercase  
    "B011",          # Do not assert False
    "B017",          # Do not assert blind exception
    "B018",          # Found useless attribute access
    "F811",          # Redefinition of unused
    "E402",          # Module level import not at top of file
    "B904",          # Within except clause raise from
    "N802",          # Function name should be lowercase
    "N818",          # Exception name should end with Error
    "E741",          # Ambiguous variable name
    "F401",          # Imported but unused
    "B023",          # Function definition does not bind loop variable
]

[tool.ruff.lint.isort]
known-first-party = ["tui_engine"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["tui_engine"]

[tool.mypy]
python_version = "3.12"
check_untyped_defs = false
disallow_any_generics = false  
disallow_incomplete_defs = false
disallow_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = false
warn_unused_ignores = false
warn_return_any = false
strict_optional = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
# A+ Grade: Enforce 85% coverage minimum with comprehensive reporting
addopts = "--cov=src/tui_engine --cov-report=html --cov-report=term-missing --cov-report=json --cov-fail-under=85 --tb=short"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "property: marks property-based tests",
]

[tool.coverage.run]
source = ["src/tui_engine"]
omit = [
    "*/tests/*", 
    "*/test_*.py",
    "*/scripts/*",
    "*/__pycache__/*",
]
branch = true  # Enable branch coverage for more thorough analysis

[tool.coverage.report]
# A+ Grade Standards
precision = 2
show_missing = true
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
title = "TUI-Engine Coverage Report (A+ Grade: 85%+ Required)"

[tool.coverage.json]
output = "coverage.json"